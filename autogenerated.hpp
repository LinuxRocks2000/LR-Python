static PyObject* draw_pixel(PyObject *self, PyObject *args){
	uint16_t xPos;
	uint16_t yPos;
	uint8_t R;
	uint8_t G;
	uint8_t B;
	if (PyArg_ParseTuple(args, "HHbbb", &xPos, &yPos, &R, &G, &B)){
		draw_pixel(xPos, yPos, R, G, B);
	}
	else{
		printf("Please check your arguments.\n");
	}
	return PyLong_FromLong(0);
}

static PyObject* draw_filled_rectangle(PyObject *self, PyObject *args){
	uint16_t x;
	uint16_t y;
	uint16_t w;
	uint16_t h;
	uint8_t R;
	uint8_t G;
	uint8_t B;
	if (PyArg_ParseTuple(args, "HHHHbbb", &x, &y, &w, &h, &R, &G, &B)){
		draw_filled_rectangle(x, y, w, h, R, G, B);
	}
	else{
		printf("Please check your arguments.\n");
	}
	return PyLong_FromLong(0);
}

static PyObject* draw_stroke_rectangle(PyObject *self, PyObject *args){
	uint16_t x;
	uint16_t y;
	uint16_t w;
	uint16_t h;
	uint8_t sw;
	uint8_t R;
	uint8_t G;
	uint8_t B;
	if (PyArg_ParseTuple(args, "HHHHbbbb", &x, &y, &w, &h, &sw, &R, &G, &B)){
		draw_stroke_rectangle(x, y, w, h, sw, R, G, B);
	}
	else{
		printf("Please check your arguments.\n");
	}
	return PyLong_FromLong(0);
}

static PyObject* draw_filled_circle(PyObject *self, PyObject *args){
	uint16_t cx;
	uint16_t cy;
	uint16_t r;
	uint8_t R;
	uint8_t G;
	uint8_t B;
	if (PyArg_ParseTuple(args, "HHHbbb", &cx, &cy, &r, &R, &G, &B)){
		draw_filled_circle(cx, cy, r, R, G, B);
	}
	else{
		printf("Please check your arguments.\n");
	}
	return PyLong_FromLong(0);
}

static PyObject* draw_stroke_circle(PyObject *self, PyObject *args){
	uint16_t cx;
	uint16_t cy;
	uint16_t r;
	uint8_t sw;
	uint8_t R;
	uint8_t G;
	uint8_t B;
	if (PyArg_ParseTuple(args, "HHHbbbb", &cx, &cy, &r, &sw, &R, &G, &B)){
		draw_stroke_circle(cx, cy, r, sw, R, G, B);
	}
	else{
		printf("Please check your arguments.\n");
	}
	return PyLong_FromLong(0);
}

static PyObject* draw_letter(PyObject *self, PyObject *args){
	uint16_t x;
	uint16_t y;
	uint8_t fontsize;
	char* letter;
	uint8_t R;
	uint8_t G;
	uint8_t B;
	if (PyArg_ParseTuple(args, "HHbsbbb", &x, &y, &fontsize, &letter, &R, &G, &B)){
		draw_letter(x, y, fontsize, letter, R, G, B);
	}
	else{
		printf("Please check your arguments.\n");
	}
	return PyLong_FromLong(0);
}

static PyMethodDef lrpython_functions[] = {
	{"draw_pixel", draw_pixel, METH_VARARGS, "Autogenerated function."},
	{"draw_filled_rectangle", draw_filled_rectangle, METH_VARARGS, "Autogenerated function."},
	{"draw_stroke_rectangle", draw_stroke_rectangle, METH_VARARGS, "Autogenerated function."},
	{"draw_filled_circle", draw_filled_circle, METH_VARARGS, "Autogenerated function."},
	{"draw_stroke_circle", draw_stroke_circle, METH_VARARGS, "Autogenerated function."},
	{"draw_letter", draw_letter, METH_VARARGS, "Autogenerated function."},
	{NULL, NULL, 0, NULL}
};

static PyModuleDef lrpython_module = {PyModuleDef_HEAD_INIT, "lrpython", NULL, -1, lrpython_functions, NULL, NULL, NULL, NULL};

static PyObject* begin_lrpython_module(void){
	return PyModule_Create(&lrpython_module);
}
